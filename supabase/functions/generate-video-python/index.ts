import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { content, mediaAssets, platform } = await req.json();

    // Use Gemini or GroqCloud to generate a video script/config
    const apiKey = Deno.env.get('GEMINI_API_KEY') || Deno.env.get('GROQ_API_KEY');
    if (!apiKey) {
      throw new Error('No Gemini or GroqCloud API key configured');
    }

    // Compose a prompt for video script/config generation
    const prompt = `Generate a detailed video script and configuration for a vertical short video for ${platform} based on the following content and media assets.\nContent: ${JSON.stringify(content)}\nMedia assets: ${JSON.stringify(mediaAssets)}\nRequirements: - Engaging, platform-optimized, with timing, visual cues, and narration. Return JSON with fields: videoScript, visualTimeline, duration, recommendedFormat.`;

    // Prefer Gemini if available
    let apiUrl = '';
    let body = {};
    if (Deno.env.get('GEMINI_API_KEY')) {
      apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${apiKey}`;
      body = {
        contents: [{ parts: [{ text: prompt }] }],
        generationConfig: { temperature: 0.7, maxOutputTokens: 2000 }
      };
    } else {
      // GroqCloud Llama 3 endpoint (example, adjust as needed)
      apiUrl = `https://api.groq.com/v1/chat/completions`;
      body = {
        model: 'llama3-8b-8192',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 2000,
        temperature: 0.7
      };
    }

    let headers: Record<string, string> = { 'Content-Type': 'application/json' };
    if (!Deno.env.get('GEMINI_API_KEY') && Deno.env.get('GROQ_API_KEY')) {
      headers['Authorization'] = `Bearer ${apiKey}`;
    }

    const apiResponse = await fetch(apiUrl, {
      method: 'POST',
      headers,
      body: JSON.stringify(body)
    });

    if (!apiResponse.ok) {
      const errorText = await apiResponse.text();
      throw new Error(`Video generation API error: ${errorText}`);
    }

    const result = await apiResponse.json();
    let videoConfig = null;
    try {
      if (result.candidates?.[0]?.content?.parts?.[0]?.text) {
        videoConfig = JSON.parse(result.candidates[0].content.parts[0].text);
      } else if (result.choices?.[0]?.message?.content) {
        videoConfig = JSON.parse(result.choices[0].message.content);
      }
    } catch (parseError) {
      videoConfig = null;
    }
    if (!videoConfig) {
      return new Response(JSON.stringify({ error: 'Video generation API did not return a valid script/config' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    return new Response(JSON.stringify({
      videoConfig,
      message: 'Video configuration generated by Gemini/GroqCloud',
      estimatedDuration: videoConfig?.duration,
      quality: 'ai-generated'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in video generation service:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
